=head1 NAME

x0d.conf - configuration file to x0d, a high performance HTTP web server.

=head1 SYNOPSIS

 import 'userdir';

 handler setup {
     workers 4;
     userdir.name 'public_html';
     listen '0.0.0.0:8080';
 }

 handler main {
     docroot '/var/www/localhost/htdocs';
     userdir;
     staticfile;
 }

=head1 DESCRIPTION

TODO

=head1 SYNTAX

TODO

=head1 CORE API

=head2 SETUP PROPERTIES

=over 6

=item B<log.level> (value)

Gets or sets the global log level.

=item B<log.file> (path)

Gets or sets the log destination.

Example:

 handler setup {
    # ...
    log.level 5;
    log.file '/var/log/x0d/error.log';
 }

=item B<workers> (number_or_array)

Gets or sets the number of workers to be spawned.
Setting this value to 1 (default) will create no additional threads
except the already existing main thread.

Passing an array of numbers will spawn as many workers as elements in that
array each worker associated with a processor affinity to
its related value in the array.

That is, when you use C<workers [0, 1, 4];> it will spawn three workers
with the first having a processor affinity of 0 (bound to CPU 0), the second
worker using the second processor (value 1) and the 3rd worker
using the fiths processor (value 4).

This is because you pass an index to the processor, if you have 4 CPUs (or cores)
available, then you may use values 0 to 3 to address them.

You should have at least as much workers as CPU cores available in your setup.

Example 1:

 handler setup {
    # ... (use 4 workers)
    workers 4;
 }

Example 2:
 handler setup {
    # ... (use 4 workers, each bound to its own distinct processor)
	workers [0, 1, 2, 3];
 }

=item B<mimetypes> (path)

Defines the file containing the mimetype mappings.

Example:

 handler setup {
    # ...
    mimetypes '/etc/mime.types';
 }

=item B<mimetypes.default> (mimetype)

Gets or sets the default mimetype to use.

=item B<etag.mtime> (boolean)

Gets or sets whether or not the mtime (last-modification time) should be
part of the ETag-field when generated.

=item B<etag.size> (boolean)

Gets or sets whether or not the file size should be
part of the ETag-field when generated.

=item B<etag.inode> (boolean)

Gets or sets whether or not the file's inode number should be
part of the ETag-field when generated.

This is generally not a good idea for cluster setups.

=item B<server.advertise> (boolean)

Gets or sets whether or not the server should propagate itself
via the Server response header.

=item B<server.tag> (array)

Sets the array of custom server advertisement tags to append to
the Server response header.

=item B<max_read_idle> (timeout)

Gets or sets the connection read idle timeout value.

=item B<max_write_idle> (timeout)

Gets or sets the connection write idle timeout value.

=item B<max_keepalive_idle> (timeout)

Gets or sets the connection write keep-alive timeout value.

=item B<max_connections> (count)

Gets or sets the number of maximum connections the server will handle in parallel.

=item B<max_files> (count)

Gets or sets the number of maximum files the server will have opened at the same time.

=item B<max_address_space> (size)

Gets or sets the memory allocation limit to this process.

=item B<max_core_size> (size)

Gets or sets the file size limit for possibly generated core files, which are
required to properly debug the process after it crashed.

=item B<tcp_cork> (boolean)

Gets or sets whether or not the request connection may enable the
C<TCP_CORK> flag.

C<TCP_CORK> is an operating-system flag that, if enabled (not default) delays
the transmission of the data for a short delay to wait for more data by the
application and pack them into fewer but bigger IP packets, which should
increase throughput alot.

However, this is not recommended on interactive HTTP response streams
and will be - if anabled by the configuration file - ignored on a given
connection when the C<Connection>-response header is set to C<keep-alive>.

C<tcp_cork> overrides the behavior of C<tcp_nodelay>.

Default: false

=item B<tcp_nodelay> (boolean)

Gets or sets whether or not the request connection may enable the
C<TCP_NODELAY> flag.

C<TCP_NODELAY> is an operation-system flag that, if enabled (not default)
disables the Nagle-algorithm for data-transmission and instantly flushes
the data to the network, thus, even very small packets, which were put into
a single IP packet otherwise, will be sent each on its own.

Enabling C<tcp_nodelay> may result into poorer network throughput, and
thus, should be left disabled in most cases, except highly interactive
HTTP response streams..

Default: false

=back

=head2 SETUP FUNCTIONS

=over 6

=item B<listen> (address:port)

=back

=head2 GLOBAL PROPERTIES

Global properties are available in setup and main handlers.

=over 6

=item B<sys.cwd>

Retrieves the current working directory.

=item B<sys.pid>

Retrieves the current process ID.

=item B<sys.now>

Retrieves the current time as a timestamp value.

=item B<sys.now_str>

Retrieves the current time as a formatted string value.

=back

=head2 GLOBAL FUNCTIONS

Global functions are available in setup and main handlers.

=over 6

=item B<sys.env> (key)

Retrieves the value of an environment variable.

Example:

 sys.env("PATH")

=back

=head2 MAIN PROPERTIES

=over 6

=item B<req.method>

Retrieves the request method, e.g. GET, POST, etc.

=item B<req.url>

Retrieves the request URI.

=item B<req.path>

Retrieves the path part of the request URI.

=item B<req.header> (name)

Retrieves request header-value of a given header-name.

Example:

 if (header('X-Test') == '') {
     # ...
 }

=item B<req.host>

Retrieves the request hostname.

=item B<req.pathinfo>

=item B<req.is_secure>

=item B<req.remoteip>

Retrieves the remote (client) IP address.

=item B<req.remoteport>

Retrieves the remote (client) port number.

=item B<req.localip>

Retrieves the local (server) IP address the client connected to.

=item B<req.localport>

Retrieves the local (server) port number the client connected to.

=item B<phys.path>

Retrieves the mapped path to the physical file.

=item B<phys.is_reg>

Retrieves a boolean indicating whether or not the physical file is
a regular file or not.

=item B<phys.is_dir>

Retrieves a boolean indicating whether or not the physical file is
a directory or not.

=item B<phys.is_exe>

Retrieves a boolean indicating whether or not the physical file is an executable
(the executable-bit set in permissions).

=item B<phys.mtime>

Retrieves the last modification timestamp of the physical file.

=item B<phys.size>

Retrieves the file size of the physical file.

=item B<phys.etag>

Retrieves the computed ETag of the physical file.

=item B<phys.mimetype>

Retrieves the mimetype of the physical file.

Indicates whether or not the current connection's request is SSL secured or not.

=item B<docroot> (path)

Sets the requests document root to the given path.

Example:

 docroot '/var/www/localhost/htdocs';

=back

=head2 MAIN FUNCTIONS

=over 6

=item B<autoindex> (array)

Remaps the current request to an index file as passed via arguments if the
current request's physical file points to a directory and this directory
contains a file listed in the array passed.

Example:

 handler main {
    # ...
    docroot '/var/www/localhost/htdocs';
    autoindex ['index.php', 'index.lua', 'index.html'];
    # ...
 }

=item B<alias> (prefix, target)

=item B<pathinfo> ()

Enforces computation of pathinfo.

=item B<header.add> (name, value)

TODO

=item B<header.overwrite> (name, value)

TODO

=item B<header.append> (name)

TODO

=item B<header.remove> (name)

TODO

=back

=head1 MAIN HANDLERS

=over 6

=item B<staticfile> ()

Serves the mapped physical file to the client.

Example:

 handler main {
    # ...
    staticfile;
 }

=item B<redirect> (url)

Redirects current request to another URL.

Example:

 handler main {
    # ...
    if (req.path == '/home') {
        redirect 'http://xzero.ws/';
    } else {
        redirect '/home/local';
    }
 }

=item B<respond> (http_code)

Generate a simple response to the current request.

Example:

 handler main {
    respond 404 if req.path == '/favicon.ico';
    # ...
 }

=back

=head1 PLUGINS

B<x0> comes with a set of standard plugins extending the core
as described below:

=head2 cgi

Adds support for CGI/1.1 scripts.

=over 6

=item B<cgi.mapping> (ext => program, ext => program, ...)

is a setup-function to specify a map of file-extension-to-program associations.
When the B<cgi.map>-handler is invoked, it looks up this map for a matching
file-extension and executes the associated program with the requested file.

An example use looks as follows:

 cgi.mapping '.rb' => '/usr/bin/ruby',
             '.pl' => '/usr/bin/perl',
             '.lua' => '/usr/bin/lua',
             '.php' => '/usr/bin/php-cgi';

=item B<cgi.map> ()

is a handler-function that uses the previousely defined mappings
(with B<cgi.mapping>) to run the requested resource as CGI script
if its file extension matches one given in the mapping.

One example use looks as follows:

 cgi.map;

=item B<cgi.prefix> (prefix => path)

is a handler-function that, checks whether the reuqested path
matches the given prefix, and if, maps it to the associated path to
invoke the program behind it.

An example use looks as follows:

 cgi.prefix '/cgi-bin/' => '/var/www/localhost/cgi-bin/';

=item B<cgi.exec> ()

is a handler-function that tests whether the underlying physical file is a
regular executable file, which is then be invoked as the CGI/1.1 program.

Example (runs B<cgi.exec> on any request path that ends with C<.cgi>):

 cgi.exec if req.path =$ '.cgi';

=back

=head2 fastcgi

Adds support for accessing FastCGI applications.
This plugin currently only supports the responder role of FastCGI.

=over 6

=item B<fastcgi> (hostname:port)

Passes the current request to a backend FastCGI application listening
on the given hostname and port.

An example use looks as follows:

 fastcgi '127.0.0.1:1234';

=back

=head2 proxy

Adds support for HTTP reverse proxying within B<x0>.

=head2 dirlisting

Automatically generates a directory listing response if the
requested path (its physical target file) is a directory.

=over 6

=item B<dirlisting> ()

Responds with an automatically generated directory listing
if the current rquest points to a physical directory.

=back

=head2 userdir

This plugin adds support for accessing user's public files
in their home directories, if available.

=over 6

=item B<userdir.name> (dirname)

setup-function to define the directory name to replace with
when the request URI is to point to a user directory.

An example use looks as follows:

 userdir.name 'public_html';

=item B<userdir> ()

handler-function to map the request URI to the userdir's 
physical directory.

The following example maps the request URI C</~trapni/welcome.html>
to C</home/trapni/public_html/welcome.html>:

 handler setup {
     # ...
     userdir.name 'public_html';
 }

 handler main {
     # ...
     userdir;
 }

=back

=head2 ssl

Provides support for encrypted connections (HTTPS) via SSL/TLS.

=over 6

=item B<ssl.loglevel> (value)

This setup-function Defines the SSL loglevel of the (B<GnuTLS>) backend library.
Values may range between 0 (no logging) to 9 (full logging).

An example use looks as follows:

 handler setup {
     # ...
     ssl.loglevel 6;
 }

=item B<ssl.listen> (ADDRESS:PORT)

This setup-function creates an HTTPS listener.
Incoming connections will be SSL-encrypted.
You will also need at least once certificate context.

An example use looks as follows:

 handler setup {
     # ...
     ssl.listen '0.0.0.0:443';
 }

=item B<ssl.context> ('keyfile' => PATH, 'crtfile' => PATH, ...)

This setup-function defines a certificate context.
A certificate context must at least provide a B<keyfile> and
a matching B<crtfile> (certificate file).

The certificate file must contain at lesat one domain name
either via Command-Name attribute or via the WWW Domain-Name extension.

The B<x0>-server then will try to select the right context
via the B<SNI> (Server Name Indication) protocol extension, which
should be support by any modern browser except any browser on Windows XP.

An example use looks as follows:

 handler setup {
     # ...
     ssl.context 'keyfile' => '/etc/certs/xzero.ws.key',
                 'crtfile' => '/etc/certs/xzero.ws.crt';
 }

=back

=head1 BUGS

This software is under early and active development and though
still considered B<experimental>. Use at your own risk.

=head1 AUTHOR

B<x0d> (daemon, core framework, and plugins) is written by Christian Parpart <trapni@gentoo.org>

=head1 SEE ALSO

L<x0d(8)>
