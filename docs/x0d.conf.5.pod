=head1 NAME

x0d.conf - configuration file to x0d, a high performance HTTP web server.

=head1 SYNOPSIS

 # import some extensions
 import 'userdir';

 # setup handler, invoked on startup, to initialize the system
 handler setup {
     workers 2;
     userdir.name 'public_html';
     listen 'bind' => 0.0.0.0, 'port' => 8080, 'backlog' => 128;
 }

 # main handler, invoked on every incoming request
 handler main {
     docroot '/var/www/localhost/htdocs';
     userdir;
     staticfile;
 }

=head1 DESCRIPTION

This file is used to configure B<x0d>.

=head1 SYNTAX

The configuration-language behind B<x0d> is L<flow(7)>, a sub-project of B<x0>.
Thus, the configuration file directly matches the B<Flow>-syntax.

B<Flow> is a handler-driven language. This means, that all you do is defining
handlers and their actions.

The actions can itself be passing control to another self defined handler
or a host-application defined handler.

For a detailed language documentation, please see the L<flow(7)> manual page.

=head2 HANDLERS

Handlers are meant to handle something. In B<x0d> these are incoming HTTP requests
and the setup handler, which is to handle simply the setup stage and no requests
at all.

A handler may either actually process for what it's there for and directly return
to the host application, or it may fail to process the request, and thus returns
to its intermediate caller for further execution (e.g. trying other handlers).

Although, you cannot pass any parameters to handlers yourself.
If a handler calls another handler, the parameters (secretly) passed to the outer
handler will also (secretly) passed to the inner handler.
The I<secret> parameter passed to handlers is there context.
In our case, this is the HTTP request associated with our B<main>-handler and
to all descendent handlers being called from here.

The B<setup> handler has no context passed to it

=head2 FUNCTIONS

Functions do something and - unlike handlers - do always return to their caller
and cannot be defined - but only - yourself.
They are there to configure something, and thus, are most seen in the
B<setup>-handler, to start listening on a given TCP/IP port for example.

You are able to pass parameters to functions. What parameters these are,
is something you can read later in that page. Parameters are comma 
separated and parameters may be surrounded by round brackets.
So the following two lines are equally the same.

 cgi.mapping '.php' => '/usr/bin/php',
             '.lsp' => '/usr/bin/lua';

Is equal to

 cgi.mapping('.php' => '/usr/bin/php',
             '.lsp' => '/usr/bin/lua');

However, you B<must> have passed the parameter separator (comma) at the end
of the first line if you want to split your function call across multiple lines,
or the B<flow>-parser will not be able to understand, that your function-call
continues on the next line, if -and only if- you have not used the round
brackets, like in the second example.

=head2 VARIABLES

TODO: variable declaration

=head2 STATEMENTS

TODO: statements in flow

=head2 CONTROL FLOW

TODO: control flow (if, switch, postscript-if, ...)

=head2 PLUGINS

TODO: plugin syntax, meaning, use-case, benifits, security thoughts.

=head1 CORE API

The core API covers all handlers, functions, and properties that do not require
additional plugins (extensions) to be loaded into the server.

=head2 SETUP PROPERTIES

=over 6

=item B<log.level> (value)

Gets or sets the global log level.

=item B<log.file> (path)

Gets or sets the log destination.

Example:

 handler setup {
    # ...
    log.level 5;
    log.file '/var/log/x0d/error.log';
 }

=item B<workers> (number_or_array)

Gets or sets the number of workers to be spawned.
Setting this value to 1 (default) will create no additional threads
except the already existing main thread.

Passing an array of numbers will spawn as many workers as elements in that
array each worker associated with a processor affinity to
its related value in the array.

That is, when you use C<workers [0, 1, 4];> it will spawn three workers
with the first having a processor affinity of 0 (bound to CPU 0), the second
worker using the second processor (value 1) and the 3rd worker
using the fiths processor (value 4).

This is because you pass an index to the processor, if you have 4 CPUs (or cores)
available, then you may use values 0 to 3 to address them.

You should have at least as much workers as CPU cores available in your setup.

Example 1:

 handler setup {
    # ... (use 4 workers)
    workers 4;
 }

Example 2:
 handler setup {
     # ... (use 4 workers, each bound to its own distinct processor)
     workers [0, 1, 2, 3];
 }

=item B<mimetypes> (path)

Defines the file containing the mimetype mappings.

Example:

 handler setup {
    # ...
    mimetypes '/etc/mime.types';
 }

=item B<mimetypes.default> (mimetype)

Gets or sets the default mimetype to use.

=item B<etag.mtime> (boolean)

Gets or sets whether or not the mtime (last-modification time) should be
part of the ETag-field when generated.

=item B<etag.size> (boolean)

Gets or sets whether or not the file size should be
part of the ETag-field when generated.

=item B<etag.inode> (boolean)

Gets or sets whether or not the file's inode number should be
part of the ETag-field when generated.

This is generally not a good idea for cluster setups.

=item B<server.advertise> (boolean)

Gets or sets whether or not the server should propagate itself
via the Server response header.

=item B<server.tag> (array)

Sets the array of custom server advertisement tags to append to
the Server response header.

=item B<max_read_idle> (timeout)

Gets or sets the connection read idle timeout value.

Default: 60 seconds

=item B<max_write_idle> (timeout)

Gets or sets the connection write idle timeout value.

Default: 60 seconds

=item B<max_keepalive_idle> (timeout)

Gets or sets the connection write keep-alive timeout value.

Default: 60 seconds

=item B<max_keepalive_requests> (number)

Gets or sets the number of requests (after the first, initial) allowed to accept
within a single connection.

Default: 100

=item B<max_request_uri_size> (number)

Gets or sets the number of bytes a request URI must fit into.

Default: 4096 byte

=item B<max_request_header_size> (number)

Gets or sets the number of bytes a single request header (name plus value) must fit into.

Default: 8192 byte

=item B<max_request_header_count> (number)

Gets or sets the maximum count of request headers a client request may sent.

Default: 100

=item B<max_body_size> (number)

Gets or sets the maximum number of bytes a request body must fit into.

Default: 2 gbyte

=item B<max_connections> (count)

Gets or sets the number of maximum connections the server will handle in parallel.

Default: 1000

=item B<max_files> (count)

Gets or sets the number of maximum files the server will have opened at the same time.

=item B<max_address_space> (size)

Gets or sets the memory allocation limit to this process.

=item B<max_core_size> (size)

Gets or sets the file size limit for possibly generated core files, which are
required to properly debug the process after it crashed.

=item B<tcp_cork> (boolean)

Corks the response stream (see C<TCP_CORK> in tcp(7)) to improve throughput.

Default: false

=item B<tcp_nodelay> (boolean)

Gets or sets whether or not the request connection may enable the
C<TCP_NODELAY> flag.

C<TCP_NODELAY> is an operation-system flag that, if enabled (not default)
disables the Nagle-algorithm for data-transmission and instantly flushes
the data to the network, thus, even very small packets, which were put into
a single IP packet otherwise, will be sent each on its own.

Enabling C<tcp_nodelay> may result into poorer network throughput, and
thus, should be left disabled in most cases, except highly interactive
HTTP response streams..

Default: false

=back

=head2 SETUP FUNCTIONS

=over 6

=item B<listen> (address:port)

Configures a listener on given address and port.
The address may be IPv4, IPv6, or a DNS name (to be resolved at startup).

Example 1:

 handler setup {
     # listen on IPv4 address 127.0.0.1 with port 8081
     listen 'bind' => 127.0.0.1, 'port' => 8081;
 }

Example 2:

 handler setup {
     # listens on IPv6 address with port 8080
     listen 'bind' => fe80::2c0:26ff:fe85:b3, 'port' => 8080;

     # listen on any IPv6 address with port 9090
     listen 'bind' => ::, 'port' => 9090;
 }

=back

=head2 GLOBAL PROPERTIES

Global properties are available in setup and main handlers.

=over 6

=item B<sys.cwd>

Retrieves the current working directory.

=item B<sys.pid>

Retrieves the current process ID.

=item B<sys.now>

Retrieves the current time as a timestamp value.

=item B<sys.now_str>

Retrieves the current time as a formatted string value.

=back

=head2 GLOBAL FUNCTIONS

Global functions are available in setup and main handlers.

=over 6

=item B<sys.env> (key)

Retrieves the value of an environment variable.

Example:

 sys.env("PATH")

=item B<file.exists> (path)

Determines whether or not given filename path exists.

Example:

 if (file.exists("/etc/htpasswd")) {
     log.debug("File exists.")
 } else {
     log.debug("File does not exist.")
 }

=item B<file.is_reg> (path)

Determines whether or not given filename path exists as regular file.

Example:

 if (file.is_reg("/etc/htpasswd")) {
     log.debug("Regular file exists.")
 } else {
     log.debug("Regular file not exist.")
 }

=item B<file.is_dir> (path)

Determines whether or not given filename path exists as directory.

Example:

 if (file.is_dir("/etc/htpasswd.d")) {
     log.debug("Directory exists.")
 } else {
     log.debug("Directory does not exist.")
 }

=item B<file.is_exe> (path)

Determines whether or not given filename path exists as executable file.

Example:

 if (file.is_exe("/bin/bash")) {
     log.debug("Executable exists.")
 } else {
     log.debug("Executable does not exist.")
 }

=back

=head2 MAIN PROPERTIES

=over 6

=item B<req.method>

Retrieves the request method, e.g. GET, POST, etc.

=item B<req.url>

Retrieves the request URI.

=item B<req.path>

Retrieves the path part of the request URI.

=item B<req.header> (name)

Retrieves request header-value of a given header-name.

Example:

 if (req.header('X-Test') == '') {
     # ...
 }

=item B<req.cookie> (name)

Retrieves the value of the cookie with the given name or an empty string if not available.

Example:

 if (req.cookie('route') != '') {
     # ...
 } else {
     # ...
 }

=item B<req.host>

Retrieves the request hostname.

=item B<req.pathinfo>

Retrieves the computed pathinfo value

=item B<req.is_secure>

Retrieves a boolean value whether or not this connection is SSL enabled.

=item B<req.status>

Retrieves the request's response status code, if set already, or 0 otherwise.

=item B<req.remoteip>

Retrieves the remote (client) IP address.

=item B<req.remoteport>

Retrieves the remote (client) port number.

=item B<req.localip>

Retrieves the local (server) IP address the client connected to.

=item B<req.localport>

Retrieves the local (server) port number the client connected to.

=item B<phys.path>

Retrieves the mapped path to the physical file.

=item B<phys.is_reg>

Retrieves a boolean indicating whether or not the physical file is
a regular file or not.

=item B<phys.is_dir>

Retrieves a boolean indicating whether or not the physical file is
a directory or not.

=item B<phys.is_exe>

Retrieves a boolean indicating whether or not the physical file is an executable
(the executable-bit set in permissions).

=item B<phys.mtime>

Retrieves the last modification timestamp of the physical file.

=item B<phys.size>

Retrieves the file size of the physical file.

=item B<phys.etag>

Retrieves the computed ETag of the physical file.

=item B<phys.mimetype>

Retrieves the mimetype of the physical file.

Indicates whether or not the current connection's request is SSL secured or not.

=item B<regex.group> (position)

Retrieves the matched group of a regular expression match.

Example:

  # rewrites /assets/SOMETHING.css to /static/SOMETHING.css
  if (req.path =~ /^/assets/(.*).css$/) {
    rewrite "/static/" + regex.group(1) + ".css"
  }

=item B<docroot> (path)

Sets the requests document root to the given path.

Example:

 docroot '/var/www/localhost/htdocs';

=back

=head2 MAIN FUNCTIONS

=over 6

=item B<error.handler> (proc)

Defines a handler to invoke when processing the request generated an HTTP error.

Example:

 handler custom_error {
     if req.path =^ '/static' {
         rewrite '/error.html'
         staticfile
     } else {
         director.fcgi 'path' => '/var/run/custom-error-generator.socket'
     }
 }

 handler main {
     error.handler custom_error
     docroot '/var/www/localhost/htdocs'
     staticfile
 }

=item B<autoindex> (array)

Remaps the current request to an index file as passed via arguments if the
current request's physical file points to a directory and this directory
contains a file listed in the array passed.

Example:

 handler main {
    # ...
    docroot '/var/www/localhost/htdocs';
    autoindex ['index.php', 'index.lua', 'index.html'];
    # ...
 }

=item B<alias> (prefix => target)

Aliases the given prefix with the matching part of the request path to the given
physical target.

Example:

 handler main {
     docroot "/var/www/localhost/htdocs"
     alias "/distfiles" => "/usr/portage/distfiles"
     dirlisting
     staticfile
 }

This is equivalent to:

 handler main {
     if (req.path =^ '/distfiles') {
         docroot '/usr/portage/distfles'
     } else {
         docroot '/var/www/localhost/htdocs'
     }
     dirlisting
     staticfile
 }

=item B<rewrite> (path)

Rewrites the current request to point to another physical file, without redirecting,
as if the client has requested another file.

 handler main {
     docroot '/var/www/localhost/htdocs'
     rewrite '/error.html' if req.path =^ '/something/else'
     staticfile
 }

=item B<pathinfo> ()

Enforces computation of pathinfo.

=item B<header.add> (name, value)

Adds the given header to the list of response headers.

=item B<header.overwrite> (name, value)

Adds (possibly overwriting if already present) a response header.

=item B<header.append> (name, value)

Appends the given value to the already existing header.
If this header is not yet available, this method is equivalent to B<header.add>.

=item B<header.remove> (name)

Removes a header by given name from the response headers.

=back

=head1 MAIN HANDLERS

=over 6

=item B<staticfile> ()

Serves the mapped physical file to the client.

Example:

 handler main {
    # ...
    staticfile;
 }

=item B<precompressed> ()

This handler looks for a precompressed version of the requested
static file and will prefer this to compression-requesting clients
if and only if their mtime match.

Supported algorithms / file suffixes are gzip (.gz) and bzip2 (.bz2).

Example:

 handler main {
    # ...
    docroot "/var/www/localhost/htdocs"
    precompressed
    staticfile
 }

=item B<redirect> (url)

Redirects current request to another URL.

Example:

 handler main {
    # ...
    if (req.path == '/home') {
        redirect 'http://xzero.io/';
    } else {
        redirect '/home/local';
    }
 }

=item B<respond> (http_code)

Generate a simple response to the current request.

Example:

 handler main {
    respond 404 if req.path == '/favicon.ico';
    # ...
 }

=back

=head1 PLUGINS

B<x0> comes with a set of standard plugins extending the core
as described below:

=head2 status

=over 6

=item B<status> ()

is a handler-function that generates a server status page.

Example:

 status if req.path == '/server-status';

=item B<status.nginx_compat> ()

is a handler-function that generates a server status page
almost compatible to the one Nginx produces.

Example:

 status.nginx_compat if req.path == '/server-status';

=back

=head2 accesslog

This plugin provides functionality to log handled requests.

The accesslog line format is currently non-configurably set
to the standard Apache accesslog style.

=over 6

=item B<accesslog> (logfile_path)

is a function to ensure the currently handled request is being
logged into the given logfile_path.

 handler main {
     accesslog '/var/log/x0d/access.log'

     docroot '/var/www/localhost/htdocs'
     staticfile
 }

=item B<accesslog.sysloc> ()

is a function to ensure the currently handled request is being
logged into the local syslog.

 handler main {
     accesslog.syslog

     docroot '/var/www/localhost/htdocs'
     staticfile
 }

=back

=head2 auth

Adds support for HTTP Basic Authentication.

=over 6

=item B<auth.realm> (realm_string)

is a function, that assigns a realm title to the currently being processed
request.

 auth.realm "Secret Area"

=item B<auth.userfile> (htpasswd_filename_string)

is a function, that assigns a user database to this request, to check against.

 auth.userfile "/var/www/localhost/.htpasswd"

=item B<auth.require> ()

is the handler, actually glueing everything together, demanding the
remote client to authenticate with username/password against the
previousely supplied userfile within the given realm.

 handler main {
     auth.realm "Secret Area"
     auth.userfile "/var/www/localhost/.htpasswd"
     auth.require

     docroot "/var/www/localhost/htdocs"
     staticfile
 }

=back

=head2 cgi

Adds support for CGI/1.1 scripts.

=over 6

=item B<cgi.mapping> (ext => program, ext => program, ...)

is a setup-function to specify a map of file-extension-to-program associations.
When the B<cgi.map>-handler is invoked, it looks up this map for a matching
file-extension and executes the associated program with the requested file.

An example use looks as follows:

 cgi.mapping '.rb' => '/usr/bin/ruby',
             '.pl' => '/usr/bin/perl',
             '.lua' => '/usr/bin/lua',
             '.php' => '/usr/bin/php-cgi';

=item B<cgi.map> ()

is a handler-function that uses the previousely defined mappings
(with B<cgi.mapping>) to run the requested resource as CGI script
if its file extension matches one given in the mapping.

One example use looks as follows:

 cgi.map;

=item B<cgi.prefix> (prefix => path)

is a handler-function that, checks whether the reuqested path
matches the given prefix, and if, maps it to the associated path to
invoke the program behind it.

An example use looks as follows:

 cgi.prefix '/cgi-bin/' => '/var/www/localhost/cgi-bin/';

=item B<cgi.exec> ()

is a handler-function that tests whether the underlying physical file is a
regular executable file, which is then be invoked as the CGI/1.1 program.

Example (runs B<cgi.exec> on any request path that ends with C<.cgi>):

 cgi.exec if req.path =$ '.cgi';

=back

=head2 director

The director plugin implements advanced load balancing.

=over 6

=item B<director.create> (name, backend1_name => url [, backend2_name => url, ...])

Statically spawnes a load balancer by given unique name with the passed backends.
The backend names must be unique within this load balancer instance.

One example might look like:

 handler setup {
     # ...
     director.create 'app_cluster',
         'app01' => 'http://192.168.4.1:8080/?capacity=8',
         'app02' => 'http://192.168.4.2:8080/?capacity=4',
         'app03' => 'http://192.168.4.3:8080/?capacity=4',
         'app04' => 'http://192.168.4.4:8080/?capacity=1',
 }

=item B<director.load> (name: path [, ...])

Spawns a load balancer instance with the given name by loading its
configuration from a plain-text database file.

Thie file SHOULD NOT edited by hand, even though, it is possible, this
is not the way to edit the cluster. There is a JSON API for
manipulating these dynamic load balancers via the B<director.api>() handler.

Example:

 handler setup {
     # ...
     
     # loads the dynamic cluster with unique name 'app_cluster' from given file:
     director.load app_cluster: '/var/lib/x0/app_cluster.db'
 }
 
 handler main {
     # ...
     director.pass 'app_cluster'
 }

=item B<director.api> ()

A request handler, to provide the client with a JSON API to inspect
the current load balancer states, their statistics, as well as allowing
you to actually reconfigure specific backends.

Statically spawned clusters may only enable/disable backends,
but dynamically spawned clusters are capable of creating new backends,
reconfiguring them, and having them removed again.
Dynamic cluster configuration is also kept on local storage and is kept in
sync with the live configuration's changes.

 handler main {
     if req.path =^ '/x0' {
         director.api '/x0'
	 }

     # ...
 }

=item B<director.pass> ()

Passes the request to the one-and-only spawned director.
This does only work with one director spawned, not two, not three, not zero.

=item B<director.pass> (director_name)

Passes the request to the director by given name.
This is usually what you are to use in your configuration file.

Example:

 handler main {
     director.pass 'app_cluster'
 }

=item B<director.pass> (director_name, backend_name)

Passes the request to a specific backend on the given director.
Use this to allow clients to decide (for example via cookie
or request-header) what backend is to server that request,
which should help you testing code on a single backend before
rolling out the backend's code change on the full cluster.

If the specified backend is not available, a 503 (Service Unavailable)
response will be generated and an appropriate error message will be logged.

Please note, that explicitely specifying a backend does ignore
any configured capacity limits.

 handler main {
     director.pass 'app_cluster', req.cookie("X-Backend")
 }

=item B<director.fcgi> (path: unix_domain_socket)

=item B<director.fcgi> (address: IP, port: PORT)

Directly proxies a givenr equest to FastCGI backend application, either via TCP/IP or via TCP/IP.

=item B<director.http> (path: unix_domain_socket)

=item B<director.http> (address: IP, port: PORT)

Directly proxies a givenr equest to FastCGI backend application, either via TCP/IP or via TCP/IP.

 handler main {
     docroot '/var/www/localhost/htdocs'
     staticfile if req.path =^ '/assets/'

     director.http address: 127.0.0.1, port: 8081;
 }

=item B<director.haproxy_monitor> (prefix)

Handler that (if prefix matches the requests URI) serves an HAproxy compatible monitor page.

If no prefix a given a prefix of '/' is assumed.

=item B<director.haproxy_stats> (prefix)

Handler that (if prefix matches the requests URI) serves an HAproxy compatible stats page.
Currently only its CSV output is implemented.

If no prefix a given a prefix of '/' is assumed.

=back

=head2 dirlisting

Automatically generates a directory listing response if the
requested path (its physical target file) is a directory.

=over 6

=item B<dirlisting> ()

Responds with an automatically generated directory listing
if the current rquest points to a physical directory.

=back

=head2 userdir

This plugin adds support for accessing user's public files
in their home directories, if available.

=over 6

=item B<userdir.name> (dirname)

setup-function to define the directory name to replace with
when the request URI is to point to a user directory.

An example use looks as follows:

 userdir.name 'public_html';

=item B<userdir> ()

handler-function to map the request URI to the userdir's 
physical directory.

The following example maps the request URI C</~trapni/welcome.html>
to C</home/trapni/public_html/welcome.html>:

 handler setup {
     # ...
     userdir.name 'public_html';
 }

 handler main {
     # ...
     userdir;
 }

=back

=head2 expire

Adds "Expires" and "Cache-Control" response headers

=over 6

=item B<expire> (value)

This function adds "Expires" and "Cache-Control" headers,
based on the given paramter B<value>, to the response.

If B<value> is a timespan, then the expiration
is set relative to now.

Otherwise (if B<value> is an absolute datetime),
an absolute expiration is set.

Examples:

 # caches the response (client-side) entity for at up to 30 minutes 
 # ahead of the files last-modification time. 
 expire phys.mtime + 30 minutes

 # caches the response (client-side) for 30 minutes from now on.
 expire sys.now + 30 minutes

 # same as above (sys.now + 30 minutes)
 expire 30 minutes

=back

=head2 ssl

Provides support for encrypted connections (HTTPS) via SSL/TLS.

=over 6

=item B<ssl.loglevel> (value)

This setup-function Defines the SSL loglevel of the (B<GnuTLS>) backend library.
Values may range between 0 (no logging) to 9 (full logging).

An example use looks as follows:

 handler setup {
     # ...
     ssl.loglevel 6;
 }

=item B<ssl.listen> ('bind' => ADDRESS, 'port' => PORT, 'backlog' => NUMBER)

This setup-function creates an HTTPS listener.
Incoming connections will be SSL-encrypted.
You will also need at least once certificate context.

B<backlog> defaults to system-default (128 usually).

An example use looks as follows:

 handler setup {
     # ...
     ssl.listen 'bind' => 0.0.0.0, 'port' => 443;
 }

=item B<ssl.context> ('keyfile' => PATH, 'crtfile' => PATH, ...)

This setup-function defines a certificate context.
A certificate context must at least provide a B<keyfile> and
a matching B<crtfile> (certificate file).

The certificate file must contain at lesat one domain name
either via Command-Name attribute or via the WWW Domain-Name extension.

The B<x0>-server then will try to select the right context
via the B<SNI> (Server Name Indication) protocol extension, which
should be supported by any modern browser except any browser on Windows XP.

An example use looks as follows:

 handler setup {
     # ...
     ssl.context 'keyfile' => '/etc/certs/xzero.io.key',
                 'crtfile' => '/etc/certs/xzero.io.crt',
                 'priorities' => "NONE:+VERS-TLS1.0:+ARCFOUR-128:+RSA:+SHA1:+COMP-NULL";
 }

In order to mitigate the SSL/TLS cipher suite vulnerability (CVE-2009-3555)
please do not use any CBC ciphers but for example:

     NONE:+VERS-TLS1.0:+ARCFOUR-128:+RSA:+SHA1:+COMP-NULL

=item B<ssl.allow_renegotiation> (boolean)

Allows or prevents SSL session renegotiation and is now disabled by default.
Do only allow SSL renegotiation in trusted environments.

=back

=head2 vhost

Provides support for easy basic mass virtual hosting.

=over 6

=item B<vhost.mapping> (fqdn => handler, fqdn => handler, ...)

This setup-function associates the given fully qualified domain names with a 
handler to invoke when an incoming request matches the given
FQDN.

You may invoke this function multiple times or just pass
multiple associations at once.

 handler setup {
     # ...
     vhost.mapping 'www.example.com' => example_hp
 }

 handler example_hp {
     docroot '/var/www/localhost/htdocs'
     # ...
     staticfile
 }

=item B<vhost.map> ()

This handler-function actually walks through the previousely initialized
map and if the request hostname matches a given hostname in the map its
associated handler is invoked to continue request processing.

 handler main {
     vhost.map
 }

=back

=head1 IDN - INTERNATIONALIZED DOMAIN NAMES

Making B<x0d> IDN-ready is totally up to the system administrator,
as server applications, ideally, do not need to care anything about IDN at all.

To configure an IDN-enabled virtual host, all you need to do, is, to
use the right encoding for the domain name.

A IDN name can be generated with the B<idn> command line tool of the B<libidn> project.
You can use this tool as follows:

 # idn -e -- "häßlich"
 hlich-lqa8a
 #

A very abstract example would look like this:
added a hint on how to convert IDN names

 handler setup {
     # ....
     vhost.mapping 'www.xn--hsslich-lqa8a.de' => my_idnish_hp
 }

 handler main {
     # ...
     vhost.map
 }

 # vhost handler for the IDN domain above
 handler my_idnish_hp {
     docroot '/srv/www/my_idnish_hp/htdocs'
     staticfile
 }

=head1 BUGS

Whilst I do not know of anything critical (they get fixed the time I find them),
this software is under early and active development and though
still considered B<experimental>. Use at your own risk and please provide feedback.

=head1 AUTHOR

B<x0d> (daemon, core framework, and plugins) is written by Christian Parpart <trapni@gentoo.org>

=head1 SEE ALSO

L<x0d(8)>, L<flow(7)>, L<spawn-fcgi(1)>, L<idn(1)>

L<http://redmine.trapni.de/projects/x0>, x0 project management page

L<http://mct.verisign-grs.com/conversiontool>, IDN conversion tool
