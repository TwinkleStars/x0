1.) REQUEST PROCESSING:

1.1) Request Processing Cycle:

Incoming requests are processed in multiple smaller sets and in most of them you may hook into to do or override
certain actions, such as translating the request URI into a local physical path, generating content based on
request URI or other certain criteria, or simply logging the request.

All hooks are defined in the server class, which you can connect to.
Each connect() returns a connection object which is strongly adviced to keep and store it in your plugin instance
to ensure automatic disconnection.

1.1.1) connection_open

Once a new client connects to the server, the connection_open hook is invoked and the pointer to the connection
object is passed.

1.1.2) pre_process

Before a request is being parsed, the pre_process hook is invoked with the request in question. 
At this point, the request line and headers have been fully parsed but not yet interpreted, though,
you're the first to catch them.

1.1.3) resolve_document_root

Right after pre processing the new request, the document root needs to be resolved, usually by interpreting
the Host request-header.

If no handler has filled the request's document_root property it will be set to "/dev/null" by default to
prevent breaking out of jail.

1.1.4) resolve_entity

As we have now the document root for this request, we need to map the request URI to a local physical path,
usually by concating document_root and the URI's path part together.

Use this hook to customize the behaviour.

1.1.5) generate_content

This is by far the most interesting hook for most of the plugin developers, as you can now generate
the actual response by modifying response headers and writing to the body.
Remember, that once something is written to the body, no header modification may be done anymore as 
they've been already serialized.

Usually we have multiple handlers registered and we need to iterate sequentially through most of them.
Which is why an iterator is being passed to the hook to call when do you don't feel responsible
for this request. But if you *do* feel responsible - and are done handling this request! - you need to invoke
the iterator's done() member method to notify the x0 core about.

1.1.6) post_process

The post_process hook is being invoked right before the response status line and headers are to be serialized.
You should not modify the headers anymore unless you know what you're doing. Usually you can use this
for diagnostics and logging.

The Content-Length header is not always set at this point, though, loggers interested in the bytes transferred 
should better connect to the request_done hook.

1.1.7) request_done

Once the response has been *fully* written to the client and is considered *done*, the request_done hook is
being invoked and can do some cleanup or logging - just like the standard accesslog plugin hooks in here
to log all requests.
Although, the bytes transferred (and Content-Length) is definitely known at this point.

Now, if this was a keep-alive connection, the connection's request parser is being invoked to resume()
parsing, otherwise, the connection is being closed.

1.1.8) connection_close

If either the client aborts abnormally or the connection is to be closed server-side intentionally,
this hook is being invoked, and meant to be the very last point right before connection destruction.

==============================================================================================================
DESIGN GOALS
------------------------------------------------------------------------------
- modular, clean, self explanary, and well documented API
- avoid synchronous I/O as much as possible.
- use sendfile()/splice() where possible
- scale excellently over multiple CPUs/cores by supporting a threaded model (1 thread per CPU core)
- caching: when caching of local files/stat's, use inotify API to invalidate those caches.
- access control: support libwrap, if possible
	(see external links at http://en.wikipedia.org/wiki/Libwrap)

RESPONSE FLOW
------------------------------------------------------------------------------

composite_source(response) {
	buffer_source(status+header), 
	filter_source(body) {,
		compress_filter(gzip),
		composite_source(body) {
			file_source(/path/to/file.html)
		}
	}
}

CLASSES
------------------------------------------------------------------------------
config                  holds configuration settings being read from file
connection              abstracts an HTTP connection (no matter how many requests it is passing/pipelining)
connection_manager      maintains the set of available connections
header                  request/response header API
listener                HTTP TCP/IP listener API
plugin                  base class for x0 plugins
request                 parsed HTTP request object
request_parser          HTTP request parser
response                HTTP response object
server                  x0 server API

SUPPORT CLASSES
------------------------------------------------------------------------------
composite_buffer		complex buffer creation and transmission class
function                generic functor API
handler                 generic handler API (e.g. used for content generator hook)
ternary_search			generic ternary search trie class

value_property			basic value property
read_property			read-only property
write_property			write-only property
propety					read/write property

THREADING MODEL:
------------------------------------------------------------------------------
- main thread *ONLY* performing I/O dispatching
- client threads processing the client requests and actions
- (main thread and client threads communicate through queues)
- avoid lockings as much as possible

REUQEST PROCESS FLOW (EBNF style):
------------------------------------------------------------------------------

http_connection_acceptor ::=
	connection_open
	(
		pre_process
			resolve_document_root
			resolve_entity
			generate_content
			request_done
		post_process
	)*
	connection_close

ASYNC APPROACH:
------------------------------------------------------------------------------
async_acceptor ::=
	connection_open
	pre_process

pre_process ::=
	resolve_document_root
	resolve_entity
	generate_content[done_handler]

generate_content ::=
	done_handler

done_handler ::=
	request_done
	post_process
	( CLOSE | pre_process )

------------------------------------------------------------------------------

	.
connect__>(request__>generator____________________>posthandler___)*>close
                            connect__>(request__>generator__>posthandler__)*>close

listener.accept:
	connection_manager.start
		connection.start
			connection.handle_read
				handle_request(request, new response);
					...
						response.done()

response.done:
	response.flush(done2) -- send remaining data

response.done2:
	delete request
	delete response


SOME REQUIREMENTS:
------------------------------------------------------------------------------

* the server will not fail when an incoming connection immediately closes,
  that is, serves no requests.
* on header connection=close we serve exactly up to this very request.
* on header connection=keep-alive we continue to serve another request.
* each connection must serve 0 to unlimited number of requests.
* each request must map to exactly one response object (and vice versa)
* request and response objects contain a reference to their connection
* a connection holds no references to their requests being parsed or responses being served,
  except for the reference to the currently parsed request.
* once a request is fully parsed, we invoke the request handler which MAY return immediately
  and process generate the response later (asynchronousely).
* a response is considered completed when response.done() is invoked.
* response.done() initiates post handlers and resuming the parsing of further 
  requests within this connection.

EVENT-TO-MODULE RELATION:
------------------------------------------------------------------------------

connection_open: ssl
	pre_process:
		resolve_document_root: vhost
		resolve_entity: userdir, indexfile
		generate_content: dirlisting, sendfile, cgi
		request_done: accesslog
	post_process:
connection_close: ssl

---------------------------------------------------------------

server
	-> create listener (server.handle_accept)

handle_accept
	-> create connection (handle_read)
		-> connection.start

response.flush()
	-> connection.close
	-> connection.resume

connection.start
	-> socket.async_read_some(handle_read)

connection.handle_read
	-> parse_request_partial
	-> handle_request
	-> close

handle_read(request, response)
	-> response.flush

listener
connection
request
response


---------------------------------------------------------------
(LINUX) SYSTEM CALLS OF INTEREST;

- timerfd, for handling timers through file descriptors
- eventfd, helpful for user driven event notification / main-loop interruption (instead of using pipes e.g.)
- signalfd, for receiving signal events via file descriptor instead of sigaction/... stuff
- inotify, file system event notification.
- fsnotify, potential successor of inotify and dnotify
- sendfile, most delicious when used fully async (for input and output)
- socketpair, not quite interesting, but worth a note
- posix_fadvise
- readahead
- everything around aio/libaio



composite_buffer - buffer object, creation and data access
composite_buffer_writer - synchronous writer
composite_buffer_async_writer - asynchronous writer
	simple_writer - writes chunks via writev, and files via read+write
		sendfile_writer - writes files via sendfile
		aio_sendfile_writer - writes files via aio+sendfile
		mmap_writer - writes files via mmap+writev



---------------------------------------------------------------
REQUEST HANDLERS / CONTENT GENERATORS:

They hook into server's content_genreator property by invoking server.generate_content.connect(...);
Do not forget to store the result of connect() (of type connection).

void my_request_handler(x0::request_handler::invokation_iterator next, x0::request& in, x0::response& out)
{
	if (in.path() != "/")
		return next();

	out.status = x0::response::ok;
	out.header("Content-Type", "text/plain");

	out.write(std::make_shared<buffer_source>("Hello, World\n"), [&](const asio::error_code& ec, int nwritten) {

		next.done();
	});
}

