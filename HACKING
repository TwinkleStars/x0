DESIGN GOALS
------------------------------------------------------------------------------
- modular, clean, self explanary, and well documented API
- avoid synchronous I/O as much as possible.
- use sendfile()/splice() where possible
- scale excellently over multiple CPUs/cores by supporting a threaded model (1 thread per CPU core)
- caching: when caching of local files/stat's, use inotify API to invalidate those caches.
- access control: support libwrap, if possible
	(see external links at http://en.wikipedia.org/wiki/Libwrap)

CLASSES
------------------------------------------------------------------------------
config                  holds configuration settings being read from file
connection              abstracts an HTTP connection (no matter how many requests it is passing/pipelining)
connection_manager      maintains the set of available connections
header                  request/response header API
listener                HTTP TCP/IP listener API
plugin                  base class for x0 plugins
request                 parsed HTTP request object
request_parser          HTTP request parser
response                HTTP response object
server                  x0 server API

SUPPORT CLASSES
------------------------------------------------------------------------------
composite_buffer		complex buffer creation and transmission class
function                generic functor API
handler                 generic handler API (e.g. used for content generator hook)
ternary_search			generic ternary search trie class

REQUEST FLOW
------------------------------------------------------------------------------

