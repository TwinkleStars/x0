for a long-term todo list, see ticket system at http://redmine.trapni.de/projects/x0

- director:
  - dynamic cluster
  - enforce queue limit. 50x (503?, ... overloaded)
  - implement active/standby/queue scheduling
  - json api: backend create/update/delete

- proxy: rewrite plugin to use Core API's HttpProxy
- director: honor standby backends, to favor them over enqueueing
- director: when a node backend becomes available again, check for enqueued requests and possibly take one
- director: JSON-API
  - stats(requests per second): per backend, per director, globally
  - stats(rps): history over the last N secs (60)
-------------------------------------------------
-------------------------------------------------

- http/x0d:
  - move Flow dependencies out of XzeroHttp into x0d directly,
    like configuration file handling etc, as this is tied to x0d anyways.
    Doing so enables us to use XzeroHttp module without Flow in external projects
    that don't need it (the `Desaster Job Queue Manager` for example).
- core: design generic key/value store API
  - C++ API
  - Flow API
  - plugins:
    - malloc
    - redis
    - memcached
- ssl: support different session cache stores:
  - malloc, memcached, redis
- core: tcmalloc support (package: google-perftools)
- flow: named arguments.
      balancer.member name => 'app01', weight => 1, check => 5 secs
    translates to
      balancer.member({'name' => 'app01', 'weight' => 1, 'check' => 5 secs});
- HA: implement feature to load balance backends, to obsolete haproxy infront of x0d.
  - handler: `balancer.manager` to generate balancer manager/status page (`/haproxy/?stats` equivalent)

===================================================================================================

FIXME x0d.conf: fastcgi/proxy examples use 'bind' but should use 'address'/'host'

0.4:

- vhost: invent new setup method (vhost.auto_include) to
  allow a more generic virtual hosting, one virtual host per file, and the filename
  matching the virtual host name (Host-header) with a handler inside, that
  must match the fully qualified host name (e.g. "www.example.com")
- ssl: counter BEAST attack by allowing the user to specify cipher priorities and 
	provide a secure default priority list.
	- http://www.g-loaded.eu/2011/09/27/mod_gnutls-rc4-cipher-beast/
- ssl: add configure option to enable/disable SSL renegotiation (counter CVE)
	- http://www.thc.org/thc-ssl-dos/
- flow: use FlowString (string interpolation class) for double quoted strings
  - interpolated string example: "Hello #{42 + i * 3}"
- [plugins] balance: new plugin. initially supporting handler: balance.rr (kind of lighty-style)
- cgi/fastcgi/proxy: verify to not pass connection-level headers
- resource management (at least for max_core_size) must be evaluated *after* privilege dropping,
  in case there is some, or they're lost.
- drop *all* occurences of std::function with raw function pointers+data pairs
- pool allocator for contexts: [server, worker, connection, request]
  - the allocated memory should be released on destruction, but
    could be passed to the upper layer for later reuse.
    e.g. the request memory pool passes its data up to the connection pool, so the next request
    can make use of it w/o invoking malloc()/new/etc, and so forth.

- introduce a specialized speed-optimized String class with an API like BufferRef/Buffer
  - including formatted string building and using external pool-allocator

- core: add runtime functions:
  - bool systemd.booted();
  - bool systemd.controlled(); / bool systemd.supervised();
- flow: rename "print" to "log", with first arg being severity and print to this server's log instead of stdout.
- flow: caseStmt ::=
            'case' expr
                ('when' expr stmt)+
                ['else' stmt]
            'end'

-----------------------------------------------------------------------------
QUALITY ASSURANCE TODO:
-----------------------------------------------------------------------------
- encapsulate ev::timer into an x0::timer (inline) to ease switching backends (e.g. to asio)
- colorize (optional) help print output
- RESPECT: handle request headers "Keep-Alive" properly (using [deadline-]timers)
- rfc_date-cache (Last-Modified, Date) i can't do simple caching of last active unix-time as the 
  last-modified field shards this, i should use a cache<time_t, std::string> of configurable max-cost value.
  (NOTE: why did I say that? why does mtime shard the server's "Date:"?)
- [minor] replace std::function<>-style hooks with a more performant solution:
  - at least for content generator (virtual method)
  - second: all hooks involved in request processing (function-member pointers, or virtual method?)
  - optional: remaining configure-time hooks.


-----------------------------------------------------------------------------
CODE CLEANUP TODO:
-----------------------------------------------------------------------------
- [minor] drop C++ exceptions at all.
- [minor] error management (std::error_code and bool+logger)
- eliminate the need of File and use just FileSource instead.
- XxxFilter -> XxxEncoder
- process: termination handler, some kind of hook that is invoked when the application is terminated (with whatever signal or not).
- reduce number of syscalls during a single request-processing


-----------------------------------------------------------------------------
FEATURES TODO:
-----------------------------------------------------------------------------
* core: when a new connection comes in but we have already reached the
  connection limit (as per config) then kill some idle connections in 
  keep-alive state.
  if there are no keep-alive connections available, drop connection immediately.
  this eliminates the need of MaxKeepAliveRequests cvar.
- [minor] x0d: add settings option to setup process' cpu affinity
- proper protocol "Upgrade"-API, as required for web sockets
- add integrity-checks for lazy programmers to check object healthy:
  - If response Content-Length was given: do not write more bytes than expected to.
  - Do not modify response headers/state once serialization has been initiated.
- add response::bytes_transferred (unsigned), which is updated automatically by write() (or something deeper) to
  match the bytes written to the client.
  This is required by the accesslog plugin to log the number of bytes sent (which is not actually content-length, or is it?)
- debug plugin: config settings for different debug prints
  - per connection performance timer
  - per request performance timer
  - request/response header dumps
- request path rewriting (rewrite)
- http reverse proxy (plugin)
  - (DONE) must support live streams (required for YaCS chat stream)
  - must support fallback nodes (required for YaCS/maintenance)
- server status API (status)
- lua server pages (wsapi)
- c++ server pages (csp) via llvm/clang (compiled in)
- webdav support (webdav)


-----------------------------------------------------------------------------
NOTES AND THOUGHTS:
-----------------------------------------------------------------------------

- should the upcoming (lua driven) template engine be part of x0 core?
  (we'll have more sources than just error documents being generated from templates, that is plugins like: dirlisting.

-----------------------------------------------------------------------------
OPTIMIZATION AND CACHING INITIATIVE
-----------------------------------------------------------------------------

- core optimizations:
  - ...
- improve configuration system
  - dir contexts hierarichally via ternary_search<>


vim:ts=2:sw=2:et
