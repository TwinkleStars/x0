for a long-term todo list, see ticket system at https://github.com/trapni/x0/issues/

- http:
  - BUG: proxy-request results into an endless living connection
    "GET http://blah/foo HTTP/1.1\r\n....", at: reading-request (header-name-begin)
    "refcount:1, outputState:unhandled, fd:58, timer:0, io.x0:None"
    - in local test it hang at: reading-request (lws-sp-ht-begin), but I can't reproduce again.
- website: new documentation-focusing  website
  - DONE: bring it online
  - write/migrate news(/blog) articles
  - functional download section
  - download section to provide 2 types of builds (aka. target environments / audience):
    - production - release packages with no experimental stuff in it
    - testing - packages containing potential new code to be merged into production
- ssl:
  - stability, should successfully work in:
    - threaded mode (ab2 stress test)
    - complex websites (phpbb2, wordpress, matelife, ialu)
  - deprecation warning
- debian mirror behind: http://distfiles.xzero.io/ubuntu/{precise,quantal,raring}/
  - create new gpg key-pair with primary email: cp@gmail.com (if available)
  - officially support: >= precise, quantal, raring
  - automate uploading to and updating the mirror per current distro

- commit 2775dce31b1729da6b5719d2758677424f056b9d:
  - check if we actually need it and if we should then apply it to director plugin, too.

-------------------------------------------------
   0.6.0 release todo
-------------------------------------------------

- ssl: eliminate deprecation warnings
- ssl: properly working SSL module (also in threaded mode).
- x0d: ensure basic binary upgrade and config reloads.
- provide debian package for: x0
  - upstart script (with: postinst->autostart, prerm->autostop)
  - (5/6): sub packages:
    - DONE: x0d
    - DONE: x0-plugins
    - DONE: libxzero-base + dev
    - DONE: libxzero-flow + dev
    - DONE: libxzero-http + dev
    - source packages (how?)
- DONE: fix crash regarding the gcc4.7 port
- DONE: fix file-logger always showing same timestamp
- DONE: boost dependency cleanup (completely get rid of boost)
- DONE: string cast function
- DONE: first attempt of code style cleanup in FlowRunner, FlowParser, ...
- DONE: postscript "unless" syntax
- DONE: update src/x0d.conf-dist to actually work
- DONE: regex match should capture groups and store results in given context (HttpRequest*)
- DONE: better max_conns compuatation.
- DONE: Socket::open() member function to share code with its static sibling,
  not marking it deprecated anymore.
- DONE: core: BufferRef not dependant on Buffer
- DONE: flow: unary (plus/)minus operator
- DONE: flow: function string(value) to return type string

-----------------------------------------------------------------------------
    0.7.0 release todo
-----------------------------------------------------------------------------

- flow: bail out on invalid cast of operator+ (for example and at least)
- flow: bool cast

-----------------------------------------------------------------------------
   runtime configuration file reloading
-----------------------------------------------------------------------------

1. compiles new version of the config file at fixed path
2. increments configurationGeneration number
3. applies incremental differences with setup handler
   - gracefully handle errors to ensure safe serving of requests (still threaded)
*. remove settings that were not touched within setup handler stage
4. replaces main request handler with the new one
5. releases resources from last compilation

-----------------------------------------------------------------------------
   Misc.
-----------------------------------------------------------------------------

- HttpMessageProcessor:
  - (FIXME) should not forward the Transfer-Encoding header when it already decodes the response body.
  - update proxy plugins to not care about this one (plugins: proxy, fastcgi, director)

- http/x0d:
  - move Flow dependencies out of XzeroHttp into x0d directly,
    like configuration file handling etc, as this is tied to x0d anyways.
    Doing so enables us to use XzeroHttp module without Flow in external projects
    that don't need it (the `Desaster Job Queue Manager` for example).
- core: design generic key/value store API
  - C++ API
  - Flow API
  - plugins:
    - malloc
    - redis
    - memcached
- ssl: support different session cache stores:
  - malloc, memcached, redis
- core: tcmalloc support (package: google-perftools)
- flow: named arguments.
      balancer.member name => 'app01', weight => 1, check => 5 secs
    translates to
      balancer.member({'name' => 'app01', 'weight' => 1, 'check' => 5 secs});
- HA: implement feature to load balance backends, to obsolete haproxy infront of x0d.
  - handler: `balancer.manager` to generate balancer manager/status page (`/haproxy/?stats` equivalent)

===================================================================================================

FIXME x0d.conf: fastcgi/proxy examples use 'bind' but should use 'address'/'host'

0.4:

- vhost: invent new setup method (vhost.auto_include) to
  allow a more generic virtual hosting, one virtual host per file, and the filename
  matching the virtual host name (Host-header) with a handler inside, that
  must match the fully qualified host name (e.g. "www.example.com")
- ssl: counter BEAST attack by allowing the user to specify cipher priorities and 
	provide a secure default priority list.
	- http://www.g-loaded.eu/2011/09/27/mod_gnutls-rc4-cipher-beast/
- ssl: add configure option to enable/disable SSL renegotiation (counter CVE)
	- http://www.thc.org/thc-ssl-dos/
- [plugins] balance: new plugin. initially supporting handler: balance.rr (kind of lighty-style)
- cgi/fastcgi/proxy: verify to not pass connection-level headers
- resource management (at least for max_core_size) must be evaluated *after* privilege dropping,
  in case there is some, or they're lost.
- drop *all* occurences of std::function with raw function pointers+data pairs
- pool allocator for contexts: [server, worker, connection, request]
  - the allocated memory should be released on destruction, but
    could be passed to the upper layer for later reuse.
    e.g. the request memory pool passes its data up to the connection pool, so the next request
    can make use of it w/o invoking malloc()/new/etc, and so forth.

- introduce a specialized speed-optimized String class with an API like BufferRef/Buffer
  - including formatted string building and using external pool-allocator

- core: add runtime functions:
  - bool systemd.booted();
  - bool systemd.controlled(); / bool systemd.supervised();
- flow: rename "print" to "log", with first arg being severity and print to this server's log instead of stdout.
- flow: caseStmt ::=
            'case' expr
                ('when' expr stmt)+
                ['else' stmt]
            'end'

-----------------------------------------------------------------------------
QUALITY ASSURANCE TODO:
-----------------------------------------------------------------------------
- encapsulate ev::timer into an x0::timer (inline) to ease switching backends (e.g. to asio)
- colorize (optional) help print output
- RESPECT: handle request headers "Keep-Alive" properly (using [deadline-]timers)
- rfc_date-cache (Last-Modified, Date) i can't do simple caching of last active unix-time as the 
  last-modified field shards this, i should use a cache<time_t, std::string> of configurable max-cost value.
  (NOTE: why did I say that? why does mtime shard the server's "Date:"?)
- [minor] replace std::function<>-style hooks with a more performant solution:
  - at least for content generator (virtual method)
  - second: all hooks involved in request processing (function-member pointers, or virtual method?)
  - optional: remaining configure-time hooks.


-----------------------------------------------------------------------------
CODE CLEANUP TODO:
-----------------------------------------------------------------------------
- [minor] drop C++ exceptions at all.
- [minor] error management (std::error_code and bool+logger)
- eliminate the need of File and use just FileSource instead.
- XxxFilter -> XxxEncoder
- process: termination handler, some kind of hook that is invoked when the application is terminated (with whatever signal or not).
- reduce number of syscalls during a single request-processing

-----------------------------------------------------------------------------
FEATURES TODO:
-----------------------------------------------------------------------------
* core: when a new connection comes in but we have already reached the
  connection limit (as per config) then kill some idle connections in 
  keep-alive state.
  if there are no keep-alive connections available, drop connection immediately.
  this eliminates the need of MaxKeepAliveRequests cvar.
- [minor] x0d: add settings option to setup process' cpu affinity
- proper protocol "Upgrade"-API, as required for web sockets
- add integrity-checks for lazy programmers to check object healthy:
  - If response Content-Length was given: do not write more bytes than expected to.
  - Do not modify response headers/state once serialization has been initiated.
- debug plugin: config settings for different debug prints
  - per connection performance timer
  - per request performance timer
  - request/response header dumps
- request path rewriting (rewrite)
- server status API (status)
- lua server pages (wsapi)
- c++ server pages (csp) via llvm/clang (compiled in)
- webdav support (webdav)
- SSI (server side includes) plugin.


-----------------------------------------------------------------------------
NOTES AND THOUGHTS:
-----------------------------------------------------------------------------

- should the upcoming (lua driven) template engine be part of x0 core?
  (we'll have more sources than just error documents being generated from templates, that is plugins like: dirlisting.

-----------------------------------------------------------------------------
OPTIMIZATION AND CACHING INITIATIVE
-----------------------------------------------------------------------------

- core optimizations:
  - ...
- improve configuration system
  - dir contexts hierarichally via ternary_search<>


vim:ts=2:sw=2:et
