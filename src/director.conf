# x0 (xzero) HTTP web server: configuration file.
# vim:syntax=flow
#
# NOTE this file is for development purposes only and does not serve as a
# production-example. The contents of this file may change on every commit
# and may not contain any useful contents or comments.
#
# Please see the examples/ directory for real x0 and x0d configuration examples.

import accesslog from 'plugins'
import director from 'plugins/director'
import auth from 'plugins'
import vhost from 'plugins'
import fastcgi from 'plugins'

handler setup {
	listen 'bind' => ::, 'port' => 8080, 'backlog' => 128

	# mimetypes
	mimetypes '/home/trapni/projects/x0/contrib/mime.types'
	mimetypes.default 'text/plain'

	director.load 'app_cluster' => './tests/app_cluster.db'
	director.load 'fcgi_cluster' => './tests/fcgi_cluster.db'

#	director.create 'statically_created',
#		'rails_3101' => 'http://127.0.0.1:3101/?capacity=1',
#		'rails_3102' => 'http://127.0.0.1:3102/?capacity=1'

	vhost.mapping 'ldap.localhost.trapni.de' => ldapadmin,
				  'ldap.windsor.local' => ldapadmin,
				  'localhost.ialu.de' => ialu
}

handler main {
	# we currently have HAproxy infront, with health checks enabled, so make it happy w/o bloating local logs
	respond 200 if req.path == '/health'

	accesslog '/dev/stdout'

	vhost.map
}

handler ldapadmin {
	docroot '/home/trapni/www/phpldapadmin/htdocs';
	autoindex 'index.php'
	pathinfo
	if phys.path =$ '.php' {
		director.pass 'fcgi_cluster', req.cookie('backend')
	} else {
		precompressed
		staticfile
	}
}

handler ialu {
	if req.path =^ '/x0' {
		#auth.realm 'admin'
		#auth.userfile './htpasswd'
		#auth.require

		if req.path =^ '/x0/' {
			docroot './www/htdocs'
			staticfile
		}

		director.api '/x0/director'

		#errorlog.api '/x0/errorlog'
		#status.api '/x0/status'
	} else if req.path =~ /^\/chat\/(listen|activity|send)$/ {
		# chat fcgi backend
		fastcgi 'path' => '/tmp/ialu-chat.socket'
	} else {
		docroot '/home/trapni/projects/ialu-web/public';
		precompressed
		staticfile

		if (req.header('Director')) {
			director.pass req.header('Director'), req.cookie('bucket'), req.cookie('backend')
		} else {
			director.pass 'app_cluster', req.cookie('bucket'), req.cookie('backend')
		}
	}
}
